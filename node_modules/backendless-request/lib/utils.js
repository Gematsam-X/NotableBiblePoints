"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.castArray = void 0;
exports.ensureEncoding = ensureEncoding;
exports.getFormData = getFormData;
exports.isStream = exports.isObject = exports.isNodeJS = exports.isFormData = exports.isBrowser = void 0;
exports.normalizeTrailingSlashInPath = normalizeTrailingSlashInPath;
exports.setFormData = setFormData;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * Casts `value` as an array if it's not one.
 * Equivalent to lodash/castArray
 */
var castArray = exports.castArray = function castArray(value) {
  return Array.isArray(value) ? value : [value];
};
var isObject = exports.isObject = function isObject(value) {
  return null != value && _typeof(value) === 'object';
};
var isFormData = exports.isFormData = function isFormData(value) {
  if (!value) {
    return false;
  }
  var FormData = getFormData();
  if (value instanceof FormData) {
    return true;
  }
  return value && value.constructor && value.constructor.toString().trim().indexOf('function FormData') === 0;
};
var isStream = exports.isStream = function isStream(value) {
  var stream = require('stream');
  return value instanceof stream.Stream;
};
var isNodeJS = exports.isNodeJS = function isNodeJS() {
  return typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
};
var isBrowser = exports.isBrowser = function isBrowser() {
  return typeof window !== 'undefined' && typeof window.document !== 'undefined';
};
var CustomFormData = null;
function getFormData() {
  if (CustomFormData) {
    return CustomFormData;
  }
  return isNodeJS() || typeof FormData === 'undefined' ? require('form-data') : FormData;
}
function setFormData(value) {
  CustomFormData = value;
}
var SAFE_CHAR_CODES = ['%40', '%3A', '%2F', '%23'];
function safeEscape(str, charCodes) {
  var _char = charCodes[0];
  if (_char) {
    var tokens = str.split(_char).map(function (p) {
      return safeEscape(p, charCodes.slice(1));
    });
    return tokens.join(_char);
  }
  return encodeURI(str);
}
function ensureComponentEncoding(uriComponent) {
  if (uriComponent === decodeURI(uriComponent)) {
    return safeEscape(uriComponent, [].concat(SAFE_CHAR_CODES));
  }
  return uriComponent;
}
function encodePath(path) {
  return path.split('/').map(ensureComponentEncoding).join('/');
}
function ensureEncoding(path) {
  try {
    var url = new URL(path);
    return url.origin + encodePath(normalizeTrailingSlashInPath(path, url)) + url.search;
  } catch (_unused) {
    return encodePath(path);
  }
}
function normalizeTrailingSlashInPath(originPath, _ref) {
  var pathname = _ref.pathname;
  if (originPath.includes('?')) {
    originPath = originPath.split('?')[0];
  }
  var keepTrailingSlash = originPath.endsWith('/');
  return !keepTrailingSlash && pathname.endsWith('/') ? pathname.slice(0, -1) : pathname;
}