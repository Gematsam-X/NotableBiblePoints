var e;import{t}from"./theme-CIxG1vPZ.js";function s(e){return"index.html"===window.location.href.split("/").pop()?e.replace("../",""):e}null==(e=t)||e.addEventListener("click",c);const a={avatar:[s("../assets/avatar/light.webp"),s("../assets/avatar/dark.webp")],deleteAccount:[s("../assets/account/delete/light.webp"),s("../assets/account/delete/dark.webp")],deleteNote:[s("../assets/notes/delete/light.webp"),s("../assets/notes/delete/dark.webp")],edit:[s("../assets/notes/edit/light.webp"),s("../assets/notes/edit/dark.webp")],share:[s("../assets/notes/share/light.webp"),s("../assets/notes/share/dark.webp")],logout:[s("../assets/account/logout/light.webp"),s("../assets/account/logout/dark.webp")],refreshNotes:[s("../assets/notes/refresh/light.webp"),s("../assets/notes/refresh/dark.webp")],restoreBackup:[s("../assets/account/backup/restore/light.webp"),s("../assets/account/backup/restore/dark.webp")],createBackup:[s("../assets/account/backup/create/light.webp"),s("../assets/account/backup/create/dark.webp")],lens:[s("../assets/lens/light.webp"),s("../assets/lens/dark.webp")],help:[s("../assets/help/light.webp"),s("assets/help/dark.webp")],github:[s("../assets/github/light.webp"),s("../assets/github/dark.webp")],openDrawer:[s("../assets/drawer/open/light.webp"),s("../assets/drawer/open/dark.webp")],otherApps:[s("../assets/drawer/otherApps/light.webp"),s("../assets/drawer/otherApps/dark.webp")],rightArrow:[s("../assets/drawer/rightArrow/light.webp"),s("../assets/drawer/rightArrow/dark.webp")]};console.log("categories",a);let r="dark"===localStorage.getItem("theme")?1:0;function o(){for(const[e,t]of Object.entries(a)){const s=document.getElementById(`${e}_img`);if(s){const e="true"===s.getAttribute("data-flipped-src");s.src=e?t[1-r]:t[r]}const a=document.getElementsByClassName(`${e}_img`);for(const e of a){const s="true"===e.getAttribute("data-flipped-src");e.src=s?t[1-r]:t[r]}}}function c(){r=0===r?1:0,o()}t&&t.addEventListener("click",c),document.addEventListener("DOMContentLoaded",o);new MutationObserver((e=>{e.forEach((e=>{"childList"===e.type&&e.addedNodes.forEach((e=>{if(1===e.nodeType&&"IMG"===e.tagName){const t=Object.keys(a).find((t=>e.id.includes(t)||e.classList.contains(`${t}_img`)));t&&(e.src=a[t][r])}}))}))})).observe(document.body,{childList:!0,subtree:!0});
