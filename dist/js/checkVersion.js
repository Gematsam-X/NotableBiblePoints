import o from"./toast.js";export default async function e(e=!0,a=!1){console.log("refresh",e,"showToast",a);try{const r=await fetch("../../version.json",{cache:"no-store"}),n=(await r.json()).version,i=localStorage.getItem("appVersion");i&&i!==n?(console.log(`Nuova versione disponibile! (${i} → ${n})`),a&&o(`Nuova versione disponibile (${i} → ${n}). Per aggiornare, ricarica la pagina.`,2e3),localStorage.setItem("appVersion",n),e&&window.setTimeout((async function(){if("caches"in window)try{const o=await caches.keys();await Promise.all(o.map((o=>caches.delete(o)))),console.log("Cache eliminata! Ora la ripristino..."),navigator.serviceWorker.controller.postMessage("updateCache"),console.log("Cache ripristinata! Ricarico la pagina..."),window.location.reload()}catch(o){console.error("Errore nella cancellazione cache:",o),window.location.reload()}else console.warn("Il browser non supporta le cache. Faccio solo il reload."),window.location.reload()}),1e3)):i?(a&&o(`La versione corrente (${localStorage.getItem("appVersion")}) è già aggiornata.`,2e3),console.log("Versione aggiornata, nessuna azione necessaria")):localStorage.setItem("appVersion",n)}catch(o){console.error("Errore durante il controllo della versione:",o)}}